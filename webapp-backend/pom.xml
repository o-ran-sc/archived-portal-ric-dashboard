<?xml version="1.0" encoding="UTF-8"?>
<!--<![CDATA[
========================LICENSE_START=================================
O-RAN-SC
%%
Copyright (C) 2019 AT&T Intellectual Property and Nokia
%%
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
========================LICENSE_END===================================
]]>-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.o-ran-sc.portal.ric-dashboard</groupId>
		<artifactId>ric-dash-parent</artifactId>
		<version>1.0.3-SNAPSHOT</version>
	</parent>
	<artifactId>ric-dash-be</artifactId>
	<name>RIC Dashboard Webapp backend</name>
	<properties>
		<java.version>1.8</java.version>
		<springfox.version>2.9.2</springfox.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.o-ran-sc.ric.a1med.client</groupId>
			<artifactId>a1-med-client</artifactId>
			<version>0.4.0-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>org.o-ran-sc.ric.anrxapp.client</groupId>
			<artifactId>anr-xapp-client</artifactId>
			<version>0.0.6-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>org.o-ran-sc.ric.e2mgr.client</groupId>
			<artifactId>e2-mgr-client</artifactId>
			<version>20190515-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>org.o-ran-sc.ric.xappmgr.client</groupId>
			<artifactId>xapp-mgr-client</artifactId>
			<version>0.1.3-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${springfox.version}</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${springfox.version}</version>
		</dependency>
		<!-- Mockito supports development, not just testing -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
		</dependency>
		<!-- Test dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<!-- do not deploy a jar or pom file -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<!-- spring sets the <version>2.8</version> -->
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>update-file-header</goal>
						</goals>
						<phase>process-sources</phase>
						<configuration>
							<organizationName>${lmp.organization.name}</organizationName>
							<inceptionYear>${lmp.inception.year}</inceptionYear>
							<projectName>${lmp.project.name}</projectName>
							<licenseName>${lmp.license.name}</licenseName>
							<processStartTag>${lmp.process.start.tag}</processStartTag>
							<processEndTag>${lmp.process.end.tag}</processEndTag>
							<addJavaLicenseAfterPackage>false</addJavaLicenseAfterPackage>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<!-- spring-boot sets the <version>3.1.0</version> -->
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/classes/resources/</outputDirectory>
							<resources>
								<resource>
									<directory>${project.parent.basedir}/webapp-frontend/dist/dashApp/</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- https://stackoverflow.com/questions/39126226/fabric8-springboot-full-example -->
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.28.0</version>
				<configuration>
					<verbose>true</verbose>
					<!-- environment variables supplied by Jenkins -->
					<pullRegistry>${env.CONTAINER_PULL_REGISTRY}</pullRegistry>
					<pushRegistry>${env.CONTAINER_PUSH_REGISTRY}</pushRegistry>
					<images>
						<image>
							<!-- Specify a tag to avoid default tag "latest" -->
							<name>${project.artifactId}:${project.version}</name>
							<build>
								<from>openjdk:8-jre-slim</from>
								<tags>
									<!-- Add tag with build number -->
									<tag>${project.version}</tag>
								</tags>
								<assembly>
									<descriptorRef>artifact</descriptorRef>
								</assembly>
								<runCmds>
									<!-- Ensure logs dir exists and is world writable -->
									<runCmd>mkdir /maven/logs</runCmd>
									<runCmd>chmod -R 777 /maven</runCmd>
								</runCmds>
								<cmd>
									<!-- CDATA prevents Eclipse formatter from breaking line -->
									<shell><![CDATA[cd /maven; java -Xms128m -Xmx1024m -Djava.security.egd=file:/dev/./urandom -jar ${project.artifactId}-${project.version}.${project.packaging}]]></shell>
								</cmd>
							</build>
						</image>
					</images>
				</configuration>
				<!-- build Docker images in install phase, push in deploy phase -->
				<executions>
					<execution>
						<goals>
							<goal>build</goal>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
